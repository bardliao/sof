#
# Intel SSP DAI
#
# All attributes defined herein are namespaced
# by alsatplg to "ssp.attribute_name"
#
# Usage: this component can be used by declaring in the "dais" field of
# a parent object. i.e.
#
# For Capture
# Objects.dais {
# 	"ssp.M.N.capture.0" {
#		ssp_format	"I2S"
#		sample_bits	24
#		mclk		"codec_mck_in"
#		bclk		"codec_slave"
#		bclk_freq	3072000
#		fsync		"codec_slave"
#		fclk_freq	48000
#		tdm_slots	2
#		tdm_slot_width	32
#		tx_slots	3
#		rx_slots	3
#	}
# }
# For Duplex
# Objects.dais {
# 	"ssp.M.N.duplex.0" {
#		ssp_format	"I2S"
#		sample_bits	24
#		mclk		"codec_mck_in"
#		bclk		"codec_slave"
#		bclk_freq	3072000
#		fsync		"codec_slave"
#		fclk_freq	48000
#		tdm_slots	2
#		tdm_slot_width	32
#		tx_slots	3
#		rx_slots	3
#	}
# }
#
# Where M is pipeline ID and N is a unique integer in the parent object.
<include/components/dai.conf>

# SSP port definition
Class.Dai."ALH" {

	#
	# Argument used to construct DAI widget (ALH index)
	#
	@args."index" {
		token_ref	"sof_dai_tokens.word"
		type "integer"
	}

	@args."direction" {
		type "string"
	}

	DefineAttribute.type {
		token_ref	"sof_dai_tokens.string"
	}

	DefineAttribute.dai_name {}

	# Backend DAI Link ID matching with the machine driver
	DefineAttribute.id {}

	DefineAttribute.alh_rate {
		# Token reference and type
		token_ref	"sof_alh_tokens.word"
	}

	DefineAttribute.alh_ch {
		# Token reference and type
		token_ref	"sof_alh_tokens.word"
	}

	attributes {
		mandatory [
			"id"
			"alh_rate"
			"alh_ch"
		]
		immutable [
			"type"
		]
	}

	type		"ALH"
}
